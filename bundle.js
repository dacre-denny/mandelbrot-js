!function(e){var n={};function t(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(o,r,function(n){return e[n]}.bind(null,r));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=5)}([function(e,n,t){var o=t(1);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(3)(o,r);o.locals&&(e.exports=o.locals)},function(e,n,t){(e.exports=t(2)(!1)).push([e.i,'body {\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  font-family: Arial, Helvetica, sans-serif; }\n\ncanvas {\n  width: 100vw;\n  height: 100vh;\n  display: block;\n  position: fixed;\n  top: 0;\n  left: 0; }\n\nform {\n  position: fixed;\n  top: 1rem;\n  right: 1rem;\n  z-index: 1;\n  background: #151515;\n  border-radius: 0.2rem;\n  padding: 0.5rem;\n  text-align: center;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n  form div {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n    position: relative; }\n\nh1 {\n  font-size: 1rem;\n  color: #eee;\n  font-size: 0.7rem;\n  font-weight: bold;\n  text-transform: uppercase; }\n\na {\n  color: #4c4c4c;\n  margin: 0 0.25rem;\n  text-decoration: none;\n  font-size: 0.55rem;\n  font-weight: bold;\n  text-transform: uppercase; }\n  a:hover {\n    text-decoration: underline; }\n\nlabel {\n  color: #4c4c4c;\n  display: block;\n  margin-bottom: 0.5rem;\n  text-align: left;\n  font-size: 0.55rem;\n  font-weight: bold;\n  text-transform: uppercase; }\n  label + span {\n    position: absolute;\n    top: 0;\n    right: 0;\n    font-size: 0.65rem;\n    font-weight: bold;\n    color: #eee; }\n\ninput {\n  outline: none;\n  cursor: pointer; }\n  input[type="range"] {\n    margin: 0;\n    width: 100%;\n    -webkit-appearance: none; }\n    input[type="range"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      height: 1rem;\n      width: 0.75rem;\n      background: #ffeb00;\n      border-radius: 0.1rem; }\n    input[type="range"]::-webkit-slider-runnable-track {\n      background: #080808;\n      height: 1rem; }\n  input[type="button"] {\n    border-radius: 0.1rem;\n    background: #222222;\n    color: #eee;\n    padding: 0.25rem 1rem;\n    border: none;\n    font-size: 0.7rem;\n    font-weight: bold;\n    text-transform: uppercase; }\n  input.toggled {\n    background: #ffeb00;\n    color: #4c4c4c; }\n  input:hover {\n    opacity: 0.7; }\n\nnav {\n  position: fixed;\n  bottom: 1rem;\n  right: 1rem;\n  left: 1rem;\n  z-index: 1;\n  text-align: center;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n  nav button {\n    padding: 0;\n    border: none;\n    display: inline-block;\n    border-radius: 50%;\n    overflow: hidden;\n    margin: 0 0.5rem;\n    border: 0.2rem solid #151515;\n    outline: none;\n    cursor: pointer; }\n    nav button img {\n      width: 5rem;\n      height: 5rem;\n      display: block; }\n    nav button:hover {\n      opacity: 0.7; }\n',""])},function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",o=e[3];if(!o)return t;if(n&&"function"==typeof btoa){var r=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(o),i=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[t].concat(i).concat([r]).join("\n")}return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];"number"==typeof a[0]&&o[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),n.push(a))}},n}},function(e,n,t){var o={},r=function(e){var n;return function(){return void 0===n&&(n=e.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var n={};return function(e,t){if("function"==typeof e)return e();if(void 0===n[e]){var o=function(e,n){return n?n.querySelector(e):document.querySelector(e)}.call(this,e,t);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}n[e]=o}return n[e]}}(),a=null,s=0,c=[],l=t(4);function u(e,n){for(var t=0;t<e.length;t++){var r=e[t],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(h(r.parts[a],n))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(h(r.parts[a],n));o[r.id]={id:r.id,refs:1,parts:s}}}}function f(e,n){for(var t=[],o={},r=0;r<e.length;r++){var i=e[r],a=n.base?i[0]+n.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):t.push(o[a]={id:a,parts:[s]})}return t}function d(e,n){var t=i(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=c[c.length-1];if("top"===e.insertAt)o?o.nextSibling?t.insertBefore(n,o.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),c.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=i(e.insertAt.before,t);t.insertBefore(n,r)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=c.indexOf(e);n>=0&&c.splice(n,1)}function p(e){var n=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var o=function(){0;return t.nc}();o&&(e.attrs.nonce=o)}return v(n,e.attrs),d(e,n),n}function v(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function h(e,n){var t,o,r,i;if(n.transform&&e.css){if(!(i="function"==typeof n.transform?n.transform(e.css):n.transform.default(e.css)))return function(){};e.css=i}if(n.singleton){var c=s++;t=a||(a=p(n)),o=b.bind(null,t,c,!1),r=b.bind(null,t,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(n,e.attrs),d(e,n),n}(n),o=function(e,n,t){var o=t.css,r=t.sourceMap,i=void 0===n.convertToAbsoluteUrls&&r;(n.convertToAbsoluteUrls||i)&&(o=l(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,n),r=function(){m(t),t.href&&URL.revokeObjectURL(t.href)}):(t=p(n),o=function(e,n){var t=n.css,o=n.media;o&&e.setAttribute("media",o);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),r=function(){m(t)});return o(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;o(e=n)}else r()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=r()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=f(e,n);return u(t,n),function(e){for(var r=[],i=0;i<t.length;i++){var a=t[i];(s=o[a.id]).refs--,r.push(s)}e&&u(f(e,n),n);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete o[s.id]}}}};var g=function(){var e=[];return function(n,t){return e[n]=t,e.filter(Boolean).join("\n")}}();function b(e,n,t,o){var r=t?"":o.css;if(e.styleSheet)e.styleSheet.cssText=g(n,r);else{var i=document.createTextNode(r),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(i,a[n]):e.appendChild(i)}}},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,o=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var r,i=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(e,n,t){"use strict";t.r(n);var o={view:{x:-.5,y:0,zoom:3},ui:{},resolution:.5,iterations:50,divergence:15,webgl:!0,animate:!1,flying:!1,time:0};const r=[],i=()=>{if(0===r.length)for(var e=0;e<1e4;e++){const n=2*Math.PI*(e/1e4);r.push(Math.sin(n))}},a=(e,n,t)=>(n-e)*t+parseFloat(e,10),s=e=>{i();const n=parseInt(1e4*e/(2*Math.PI),10)%1e4;return r[n]},c=(e,n,t,o,r)=>{n-=.5,t-=.5;const i=u(e)*r,a=f(e),s=e.zoom*o,c=s*r,l=s;return{x:e.x-n*(c-i),y:e.y-t*(l-a),zoom:s}},l=()=>document.body.clientWidth/document.body.clientHeight,u=e=>e.zoom,f=e=>e.zoom;let d=null,m=null;const p=e=>{const n=e.createBuffer();return e.bindBuffer(e.ARRAY_BUFFER,n),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,1,1,1,-1,-1,1,-1]),e.STATIC_DRAW),n},v=(e,n,t)=>{const o=e.createShader(n);return e.shaderSource(o,t),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS)?o:(e.deleteShader(o),null)},h=(e,n)=>{const t=`\nprecision highp float;\n\nuniform vec4 view;\nuniform vec2 screen;\nuniform float phase;\nvarying vec2 vUV;  \n\n#define ITERATIONS ${n.toFixed(2)}\n\nvec4 getColor(float t) {\n    \n    return vec4(\n        (cos(t) + 1.0) * 0.5,\n        (sin(t + 3.1415) + 1.0) * 0.5,\n        (sin(t) + 1.0) * 0.5,\n        1.0\n    );\n}\n\nvoid main() {\n\n    vec4 color = vec4(0.0,0.0,0.0,1.0); \n\n    float COMPx = 0.0;\n    float COMPy = 0.0;\n    float z = 0.0;\n\n    float zoom = view.z;\n    float width = zoom * view.w;\n    float height = zoom;\n    \n    float left = view.x - width * 0.5;\n    float top = view.y - height * 0.5;  \n\n    float factorX = width / 1.0;\n    float factorY = height / 1.0;\n\n   for(float i = 0.0; i < 1.0; i += (1.0 / ITERATIONS)) {\n\n        float x = (vUV.x * factorX) + left;\n        float y = (vUV.y * factorY) + top;\n        \n        float COMPx_new = COMPx * COMPx - COMPy * COMPy + x;\n        float COMPy_new = 2.0 * COMPx * COMPy + y;\n        float zN = (COMPx_new + COMPy_new);\n\n        if (abs(zN - z) > 5.0) {\n            color = getColor(i * 10.0 + phase);\n            break;\n        }\n\n        COMPx = COMPx_new;\n        COMPy = COMPy_new;\n        z = zN;\n    }\n\n    gl_FragColor = color;\n}\n`,o=v(e,e.VERTEX_SHADER,"\nprecision highp float;\n\nattribute vec2 vertexPosition;\n\nvarying vec2 vUV; \n\nvoid main() {\n\n    float x = vertexPosition.x;\n    float y = vertexPosition.y;\n\n    vUV = vec2(x, -y) * 0.5 + vec2(0.5, 0.5);\n    gl_Position =  vec4(vertexPosition.xy, 0.0, 1.0);\n}\n"),r=v(e,e.FRAGMENT_SHADER,t),i=e.createProgram();if(e.attachShader(i,o),e.attachShader(i,r),e.linkProgram(i),e.getProgramParameter(i,e.LINK_STATUS))return{program:i,attribLocations:{vertexPosition:e.getAttribLocation(i,"vertexPosition")},uniformLocations:{view:e.getUniformLocation(i,"view"),screen:e.getUniformLocation(i,"screen"),phase:e.getUniformLocation(i,"phase")}}},g=(e,n,t)=>{e.viewport(0,0,e.canvas.width,e.canvas.height),e.clearColor(1,1,0,1),e.clear(e.COLOR_BUFFER_BIT),((e,n,t)=>{e.bindBuffer(e.ARRAY_BUFFER,d),e.vertexAttribPointer(m.attribLocations.vertexPosition,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(m.attribLocations.vertexPosition),e.useProgram(m.program),e.uniform4fv(m.uniformLocations.view,[n.view.x,n.view.y,n.view.zoom,t]),e.uniform2fv(m.uniformLocations.screen,[e.canvas.width,e.canvas.height]),e.uniform1f(m.uniformLocations.phase,n.time)})(e,n,t),e.drawArrays(e.TRIANGLE_STRIP,0,4)},b=(e,n,t)=>{const o=document.getElementById(e);if(!o)return;const r=e=>{const n=o.parentElement.querySelector("span");n&&(n.innerText=e)};o.value=n,o.addEventListener("change",e=>{r(e.currentTarget.value),t&&t(e)}),r(n)},y=(e,n,t)=>{const o=document.getElementById(e);o&&(o.classList.toggle("toggled",n),o.addEventListener("click",e=>{n=!n,o.classList.toggle("toggled",n),t(e)}))},w=(e,n)=>{const t=document.getElementById(e);t&&t.addEventListener("click",n)},x=(e,n,t)=>{e[n+0]=125*((e=>{i();const n=parseInt(1e4*(e+.5*Math.PI)/(2*Math.PI),10)%1e4;return r[n]})(t)+1),e[n+1]=125*(s(t+Math.PI)+1),e[n+2]=125*(s(t)+1),e[n+3]=255},O=(e,n,t)=>{const o=e.canvas.width,r=e.canvas.height;e.fillStyle="black",e.fillRect(0,0,o,r);const i=e.getImageData(0,0,o,r);((e,n,t,o,r)=>{const i=o.view,a=o.time,s=o.iterations,c=o.divergence,l=u(i)*r,d=f(i),m=i.x-.5*l,p=i.y-.5*d,v=l/n,h=d/t;for(var g=0;g<n;g++)for(var b=0;b<t;b++){const t=g*v+m,o=b*h+p;for(var y=0,w=0,O=0,P=0;P<1;P+=1/s){const r=w*w-O*O+t,i=2*w*O+o,s=r+i;if(Math.abs(s-y)>c){x(e,4*(b*n+g),10*P+a);break}w=r,O=i,y=s}}})(i.data,o,r,n,t),e.putImageData(i,0,0)};let P=null;const L=e=>e.clientX/document.body.clientWidth,C=e=>e.clientY/document.body.clientHeight,z=(e,n)=>{const t=Object.assign({},o.view);o.flying&&(clearTimeout(o.flying),o.flying=void 0);const r=i=>{const s=Math.min((Date.now()-i)/1e3,.5),c=((e,n)=>{return(e/=n/2)<1?.5*e*e*e:.5*((e-=2)*e*e+2)})(s,.5);o.view=((e,n,t)=>{return{x:a(e.x,n.x,t),y:a(e.y,n.y,t),zoom:a(e.zoom,n.zoom,t)}})(t,e,c),o.flying=s<.5?setTimeout(r,10,i):void 0,!o.flying&&n&&n()};o.flying=setTimeout(r,0,Date.now())},M=e=>{if(e.buttons>0){const n=-e.movementX/document.body.clientWidth,t=-e.movementY/document.body.clientHeight;o.view=((e,n,t,o)=>{const r=u(e)*o,i=f(e);return{x:e.x+n*r,y:e.y+t*i,zoom:e.zoom}})(o.view,n,t,l())}},S=e=>{const n=L(e),t=C(e),r=e.wheelDeltaY>0?.75:1.25;z(c(o.view,n,t,r,l()))},A=e=>{const n=L(e),t=C(e);z(c(o.view,n,t,.1,l()))},R=()=>{const e=document.querySelector("canvas"),n=parseInt(document.body.clientWidth*o.resolution),t=parseInt(document.body.clientHeight*o.resolution);e.width!==n&&(e.width=n),e.height!==t&&(e.height=t),o.webgl?g(P,o,l()):O(P,o,l()),o.animate&&(o.time=Date.now()/1e3%1e3)},E=()=>{z({x:-.5,y:0,zoom:3})},I=e=>{o.resolution=parseFloat(e.currentTarget.value)},T=e=>{o.iterations=parseInt(e.currentTarget.value),o.webgl&&B(o.webgl)},U=e=>{o.divergence=parseInt(e.currentTarget.value),o.webgl&&B(o.webgl)},k=()=>{o.animate=!o.animate},j=()=>{o.webgl=!o.webgl,B(o.webgl)},_=(e,n)=>{((e,n)=>{const t=document.body.querySelector(e);if(!t)return;const o=document.createElement("canvas");o.width=150,o.height=150;const r=o.getContext("2d");n(r),t.src=r.canvas.toDataURL(),o.remove()})(`#${e} img`,e=>{O(e,Object.assign({},o,{view:n}),1)}),w(e,()=>{(e=>{const n={x:-.5,y:0,zoom:3};return e.x===n.x&&e.y===n.y&&e.zoom===n.zoom})(o.view)?z(n):z({x:-.5,y:0,zoom:3},()=>z(n))})},B=e=>{for(const e of document.body.querySelectorAll("canvas"))e.remove();const n=document.createElement("canvas");if(n.addEventListener("mousemove",M),n.addEventListener("mousewheel",S),n.addEventListener("dblclick",A),n.addEventListener("contextmenu",e=>e.preventDefault()),document.body.appendChild(n),e)try{P=((e,n)=>{var t=e.getContext("webgl");return d=p(t),m=h(t,n),t})(n,o.iterations)}catch(e){console.error(e),o.webgl=!1,P=n.getContext("2d")}else P=(e=>e.getContext("2d"))(n)};var F=()=>{w("reset",E),y("animate",o.animate,k),y("mode",o.webgl,j),b("resolution",o.resolution,I),b("iterations",o.iterations,T),b("divergence",o.divergence,U),B(o.webgl),_("dest0",{x:-.8036284402834375,y:.18252764009245603,zoom:.0017168874184687476}),_("dest1",{x:-1.195852878464819,y:-.31260127931769716,zoom:.02999999999999997}),_("dest2",{x:.28773359691377504,y:.011569467738227467,zoom:.0010047419752590714}),_("dest3",{x:-.5658287599483223,y:.5653723561505654,zoom:.057453340757295884});const e=()=>{R(),requestAnimationFrame(e)};e()};t(0);F()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
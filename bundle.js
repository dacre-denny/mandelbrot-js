!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=5)}([function(n,e,t){var r=t(1);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(3)(r,o);r.locals&&(n.exports=r.locals)},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,'body {\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  font-family: Arial, Helvetica, sans-serif; }\n\ncanvas {\n  width: 100vw;\n  height: 100vh;\n  display: block;\n  position: fixed;\n  top: 0;\n  left: 0; }\n\nform {\n  position: fixed;\n  top: 1rem;\n  right: 1rem;\n  z-index: 1;\n  background: #151515;\n  border-radius: 0.2rem;\n  padding: 0.5rem;\n  text-align: center;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n  form div {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n    position: relative; }\n\nh1 {\n  font-size: 1rem;\n  color: #eee;\n  font-size: 0.7rem;\n  font-weight: bold;\n  text-transform: uppercase; }\n\na {\n  color: #4c4c4c;\n  margin: 0 0.25rem;\n  text-decoration: none;\n  font-size: 0.55rem;\n  font-weight: bold;\n  text-transform: uppercase; }\n  a:hover {\n    text-decoration: underline; }\n\nlabel {\n  color: #4c4c4c;\n  display: block;\n  margin-bottom: 0.5rem;\n  text-align: left;\n  font-size: 0.55rem;\n  font-weight: bold;\n  text-transform: uppercase; }\n  label + span {\n    position: absolute;\n    top: 0;\n    right: 0;\n    font-size: 0.65rem;\n    font-weight: bold;\n    color: #eee; }\n\ninput {\n  outline: none;\n  cursor: pointer; }\n  input[type="range"] {\n    margin: 0;\n    width: 100%;\n    -webkit-appearance: none; }\n    input[type="range"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      height: 1rem;\n      width: 0.75rem;\n      background: #ffeb00;\n      border-radius: 0.1rem; }\n    input[type="range"]::-webkit-slider-runnable-track {\n      background: #080808;\n      height: 1rem; }\n  input[type="button"] {\n    border-radius: 0.1rem;\n    background: #222222;\n    color: #eee;\n    padding: 0.25rem 1rem;\n    border: none;\n    font-size: 0.7rem;\n    font-weight: bold;\n    text-transform: uppercase; }\n  input.toggled {\n    background: #ffeb00;\n    color: #4c4c4c; }\n  input:hover {\n    opacity: 0.7; }\n\nnav {\n  position: fixed;\n  bottom: 1rem;\n  right: 1rem;\n  left: 1rem;\n  z-index: 1;\n  text-align: center;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n  nav button {\n    padding: 0;\n    border: none;\n    display: inline-block;\n    border-radius: 50%;\n    overflow: hidden;\n    margin: 0 0.5rem;\n    border: 0.2rem solid #151515;\n    outline: none;\n    cursor: pointer; }\n    nav button img {\n      width: 5rem;\n      height: 5rem;\n      display: block; }\n    nav button:hover {\n      opacity: 0.7; }\n',""])},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=function(n){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"}(r),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var r={},o=function(n){var e;return function(){return void 0===e&&(e=n.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(n){var e={};return function(n,t){if("function"==typeof n)return n();if(void 0===e[n]){var r=function(n,e){return e?e.querySelector(n):document.querySelector(n)}.call(this,n,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}}(),a=null,c=0,u=[],s=t(4);function f(n,e){for(var t=0;t<n.length;t++){var o=n[t],i=r[o.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](o.parts[a]);for(;a<o.parts.length;a++)i.parts.push(h(o.parts[a],e))}else{var c=[];for(a=0;a<o.parts.length;a++)c.push(h(o.parts[a],e));r[o.id]={id:o.id,refs:1,parts:c}}}}function l(n,e){for(var t=[],r={},o=0;o<n.length;o++){var i=n[o],a=e.base?i[0]+e.base:i[0],c={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(c):t.push(r[a]={id:a,parts:[c]})}return t}function d(n,e){var t=i(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===n.insertAt)r?r.nextSibling?t.insertBefore(e,r.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),u.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(n.insertAt.before,t);t.insertBefore(e,o)}}function v(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=u.indexOf(n);e>=0&&u.splice(e,1)}function m(n){var e=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var r=function(){0;return t.nc}();r&&(n.attrs.nonce=r)}return p(e,n.attrs),d(n,e),e}function p(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function h(n,e){var t,r,o,i;if(e.transform&&n.css){if(!(i="function"==typeof e.transform?e.transform(n.css):e.transform.default(n.css)))return function(){};n.css=i}if(e.singleton){var u=c++;t=a||(a=m(e)),r=b.bind(null,t,u,!1),o=b.bind(null,t,u,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",p(e,n.attrs),d(n,e),e}(e),r=function(n,e,t){var r=t.css,o=t.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=s(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),c=n.href;n.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}.bind(null,t,e),o=function(){v(t),t.href&&URL.revokeObjectURL(t.href)}):(t=m(e),r=function(n,e){var t=e.css,r=e.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){v(t)});return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=o()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=l(n,e);return f(t,e),function(n){for(var o=[],i=0;i<t.length;i++){var a=t[i];(c=r[a.id]).refs--,o.push(c)}n&&f(l(n,e),e);for(i=0;i<o.length;i++){var c;if(0===(c=o[i]).refs){for(var u=0;u<c.parts.length;u++)c.parts[u]();delete r[c.id]}}}};var g=function(){var n=[];return function(e,t){return n[e]=t,n.filter(Boolean).join("\n")}}();function b(n,e,t,r){var o=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=g(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,r=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var o,i=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,e,t){"use strict";t.r(e);var r={view:{x:-.5,y:0,zoom:3},ui:{},resolution:.5,iterations:50,divergence:15,webgl:!0,animate:!1,flying:!1,time:0},o=[],i=function(){if(0===o.length)for(var n=0;n<1e4;n++){var e=2*Math.PI*(n/1e4);o.push(Math.sin(e))}},a=function(n,e,t){return(e-n)*t+parseFloat(n,10)},c=function(n){i();var e=parseInt(1e4*n/(2*Math.PI),10)%1e4;return o[e]},u=function(n,e,t,r,o){e-=.5,t-=.5;var i=f(n)*o,a=l(n),c=n.zoom*r,u=c*o,s=c,d=c;return{x:n.x-e*(u-i),y:n.y-t*(s-a),zoom:d}},s=function(){return document.body.clientWidth/document.body.clientHeight},f=function(n){return n.zoom},l=function(n){return n.zoom},d=null,v=null,m=function(n){var e=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,e),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,1,1,1,-1,-1,1,-1]),n.STATIC_DRAW),e},p=function(n,e,t){var r=n.createShader(e);return n.shaderSource(r,t),n.compileShader(r),n.getShaderParameter(r,n.COMPILE_STATUS)?r:(n.deleteShader(r),null)},h=function(n,e){var t="\nprecision highp float;\n\nuniform vec4 view;\nuniform vec2 screen;\nuniform float phase;\nvarying vec2 vUV;  \n\n#define ITERATIONS ".concat(e.toFixed(2),"\n\nvec4 getColor(float t) {\n    \n    return vec4(\n        (cos(t) + 1.0) * 0.5,\n        (sin(t + 3.1415) + 1.0) * 0.5,\n        (sin(t) + 1.0) * 0.5,\n        1.0\n    );\n}\n\nvoid main() {\n\n    vec4 color = vec4(0.0,0.0,0.0,1.0); \n\n    float COMPx = 0.0;\n    float COMPy = 0.0;\n    float z = 0.0;\n\n    float zoom = view.z;\n    float width = zoom * view.w;\n    float height = zoom;\n    \n    float left = view.x - width * 0.5;\n    float top = view.y - height * 0.5;  \n\n    float factorX = width / 1.0;\n    float factorY = height / 1.0;\n\n   for(float i = 0.0; i < 1.0; i += (1.0 / ITERATIONS)) {\n\n        float x = (vUV.x * factorX) + left;\n        float y = (vUV.y * factorY) + top;\n        \n        float COMPx_new = COMPx * COMPx - COMPy * COMPy + x;\n        float COMPy_new = 2.0 * COMPx * COMPy + y;\n        float zN = (COMPx_new + COMPy_new);\n\n        if (abs(zN - z) > 5.0) {\n            color = getColor(i * 10.0 + phase);\n            break;\n        }\n\n        COMPx = COMPx_new;\n        COMPy = COMPy_new;\n        z = zN;\n    }\n\n    gl_FragColor = color;\n}\n"),r=p(n,n.VERTEX_SHADER,"\nprecision highp float;\n\nattribute vec2 vertexPosition;\n\nvarying vec2 vUV; \n\nvoid main() {\n\n    float x = vertexPosition.x;\n    float y = vertexPosition.y;\n\n    vUV = vec2(x, -y) * 0.5 + vec2(0.5, 0.5);\n    gl_Position =  vec4(vertexPosition.xy, 0.0, 1.0);\n}\n"),o=p(n,n.FRAGMENT_SHADER,t),i=n.createProgram();if(n.attachShader(i,r),n.attachShader(i,o),n.linkProgram(i),n.getProgramParameter(i,n.LINK_STATUS))return{program:i,attribLocations:{vertexPosition:n.getAttribLocation(i,"vertexPosition")},uniformLocations:{view:n.getUniformLocation(i,"view"),screen:n.getUniformLocation(i,"screen"),phase:n.getUniformLocation(i,"phase")}}},g=function(n,e,t){n.viewport(0,0,n.canvas.width,n.canvas.height),n.clearColor(1,1,0,1),n.clear(n.COLOR_BUFFER_BIT),function(n,e,t){n.bindBuffer(n.ARRAY_BUFFER,d),n.vertexAttribPointer(v.attribLocations.vertexPosition,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(v.attribLocations.vertexPosition),n.useProgram(v.program),n.uniform4fv(v.uniformLocations.view,[e.view.x,e.view.y,e.view.zoom,t]),n.uniform2fv(v.uniformLocations.screen,[n.canvas.width,n.canvas.height]),n.uniform1f(v.uniformLocations.phase,e.time)}(n,e,t),n.drawArrays(n.TRIANGLE_STRIP,0,4)},b=function(n,e,t){var r=document.getElementById(n);if(r){var o=function(n){var e=r.parentElement.querySelector("span");e&&(e.innerText=n)};r.value=e,r.addEventListener("change",function(n){o(n.currentTarget.value),t&&t(n)}),o(e)}},y=function(n,e,t){var r=document.getElementById(n);r&&(r.classList.toggle("toggled",e),r.addEventListener("click",function(n){e=!e,r.classList.toggle("toggled",e),t(n)}))},w=function(n,e){var t=document.getElementById(n);t&&t.addEventListener("click",e)},x=function(n,e,t){n[e+0]=125*(function(n){i();var e=parseInt(1e4*(n+.5*Math.PI)/(2*Math.PI),10)%1e4;return o[e]}(t)+1),n[e+1]=125*(c(t+Math.PI)+1),n[e+2]=125*(c(t)+1),n[e+3]=255},O=function(n,e,t){var r=n.canvas.width,o=n.canvas.height;n.fillStyle="black",n.fillRect(0,0,r,o);var i=n.getImageData(0,0,r,o);!function(n,e,t,r,o){for(var i=r.view,a=r.time,c=r.iterations,u=r.divergence,s=f(i)*o,d=l(i),v=i.x-.5*s,m=i.y-.5*d,p=s/e,h=d/t,g=0;g<e;g++)for(var b=0;b<t;b++)for(var y=g*p+v,w=b*h+m,O=0,P=0,L=0,C=0;C<1;C+=1/c){var S=P*P-L*L+y,z=2*P*L+w,M=S+z;if(Math.abs(M-O)>u){x(n,4*(b*e+g),10*C+a);break}P=S,L=z,O=M}}(i.data,r,o,e,t),n.putImageData(i,0,0)},P=null,L=function(n){return n.clientX/document.body.clientWidth},C=function(n){return n.clientY/document.body.clientHeight},S=function(n,e){var t=Object.assign({},r.view);r.flying&&(clearTimeout(r.flying),r.flying=void 0);r.flying=setTimeout(function o(i){var c=Math.min((Date.now()-i)/1e3,.5),u=function(n,e){return(n/=e/2)<1?.5*n*n*n:.5*((n-=2)*n*n+2)}(c,.5);r.view=function(n,e,t){return{x:a(n.x,e.x,t),y:a(n.y,e.y,t),zoom:a(n.zoom,e.zoom,t)}}(t,n,u),r.flying=c<.5?setTimeout(o,10,i):void 0,!r.flying&&e&&e()},0,Date.now())},z=function(n){if(n.buttons>0){var e=-n.movementX/document.body.clientWidth,t=-n.movementY/document.body.clientHeight;r.view=function(n,e,t,r){var o=f(n)*r,i=l(n);return{x:n.x+e*o,y:n.y+t*i,zoom:n.zoom}}(r.view,e,t,s())}},M=function(n){var e=L(n),t=C(n),o=n.wheelDeltaY>0?.75:1.25;S(u(r.view,e,t,o,s()))},A=function(n){var e=L(n),t=C(n);S(u(r.view,e,t,.1,s()))},R=function(){var n=document.querySelector("canvas"),e=parseInt(document.body.clientWidth*r.resolution),t=parseInt(document.body.clientHeight*r.resolution);n.width!==e&&(n.width=e),n.height!==t&&(n.height=t),r.webgl?g(P,r,s()):O(P,r,s()),r.animate&&(r.time=Date.now()/1e3%1e3)},E=function(){S({x:-.5,y:0,zoom:3})},I=function(n){r.resolution=parseFloat(n.currentTarget.value)},T=function(n){r.iterations=parseInt(n.currentTarget.value),r.webgl&&B(r.webgl)},U=function(n){r.divergence=parseInt(n.currentTarget.value),r.webgl&&B(r.webgl)},k=function(){r.animate=!r.animate},j=function(){r.webgl=!r.webgl,B(r.webgl)},_=function(n,e){!function(n,e){var t=document.body.querySelector(n);if(t){var r=document.createElement("canvas");r.width=150,r.height=150;var o=r.getContext("2d");e(o),t.src=o.canvas.toDataURL(),r.remove()}}("#".concat(n," img"),function(n){O(n,Object.assign({},r,{view:e}),1)}),w(n,function(){!function(n){var e={x:-.5,y:0,zoom:3};return n.x===e.x&&n.y===e.y&&n.zoom===e.zoom}(r.view)?S({x:-.5,y:0,zoom:3},function(){return S(e)}):S(e)})},B=function(n){var e=!0,t=!1,o=void 0;try{for(var i,a=document.body.querySelectorAll("canvas")[Symbol.iterator]();!(e=(i=a.next()).done);e=!0){i.value.remove()}}catch(n){t=!0,o=n}finally{try{e||null==a.return||a.return()}finally{if(t)throw o}}var c=document.createElement("canvas");if(c.addEventListener("mousemove",z),c.addEventListener("mousewheel",M),c.addEventListener("dblclick",A),c.addEventListener("contextmenu",function(n){return n.preventDefault()}),document.body.appendChild(c),n)try{P=function(n,e){var t=n.getContext("webgl");return d=m(t),v=h(t,e),t}(c,r.iterations)}catch(n){console.error(n),r.webgl=!1,P=c.getContext("2d")}else P=function(n){return n.getContext("2d")}(c)},F=function(){w("reset",E),y("animate",r.animate,k),y("mode",r.webgl,j),b("resolution",r.resolution,I),b("iterations",r.iterations,T),b("divergence",r.divergence,U),B(r.webgl),_("dest0",{x:-.8036284402834375,y:.18252764009245603,zoom:.0017168874184687476}),_("dest1",{x:-1.195852878464819,y:-.31260127931769716,zoom:.02999999999999997}),_("dest2",{x:.28773359691377504,y:.011569467738227467,zoom:.0010047419752590714}),_("dest3",{x:-.5658287599483223,y:.5653723561505654,zoom:.057453340757295884});!function n(){R(),requestAnimationFrame(n)}()};t(0);F()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
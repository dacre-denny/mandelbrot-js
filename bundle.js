!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r=0;const o=e=>{const t=2*Math.PI*(e/255);return`rgba(${parseInt(.5*(Math.cos(t+r)+1)*255)},${parseInt(.5*(Math.sin(t+r+Math.PI)+1)*255)},${parseInt(.5*(Math.sin(t+r)+1)*255)}, 1)`};var l={l:-2,t:-2,w:4,h:4};const i=document.getElementById("mandelbrot");i.onclick=(e=>{const t=e.clientX/500,n=e.clientY/500;l.l=-t,l.t=-n,l.w=.85*l.w,l.h=.85*l.h,console.log(t,n)});const a=e=>{((e,t)=>{for(var n=0;n<500;n++)for(var r=0;r<500;r++){var l=r/500*t.h+t.t,i=n/500*t.w+t.l,a=0,u=0,c=!1,f=0;for(f=0;f<255;f+=1){var s=a*a-u*u+i,d=2*a*u+l,p=s+d;if(p>2){c=!0;break}a=s,u=d}c&&Math.min(f,255),e.fillStyle=c?o(f):"rgba(0,0,0,1)",e.fillRect(n,r,1,1)}console.log("done")})(i.getContext("2d"),l),.9,r+=.01,setTimeout(()=>{window.requestAnimationFrame(a)},5)};window.requestAnimationFrame(a),console.log(o(0)),console.log(Math.sin(0))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(n){var e={};function t(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)t.d(o,r,function(e){return n[e]}.bind(null,r));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=5)}([function(n,e,t){var o=t(1);"string"==typeof o&&(o=[[n.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};t(3)(o,r);o.locals&&(n.exports=o.locals)},function(n,e,t){(n.exports=t(2)(!1)).push([n.i,'body {\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  font-family: Arial, Helvetica, sans-serif; }\n\ncanvas {\n  width: 100vw;\n  height: 100vh;\n  display: block;\n  position: fixed;\n  top: 0;\n  left: 0; }\n\nform {\n  position: fixed;\n  top: 1rem;\n  right: 1rem;\n  z-index: 1;\n  background: #151515;\n  border-radius: 0.2rem;\n  padding: 0.5rem;\n  text-align: center;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n  form div {\n    margin-top: 1rem;\n    margin-bottom: 0.5rem;\n    position: relative; }\n\nh1 {\n  font-size: 1rem;\n  color: #eee;\n  font-size: 0.7rem;\n  font-weight: bold;\n  text-transform: uppercase; }\n\na {\n  color: #4c4c4c;\n  margin: 0 0.25rem;\n  text-decoration: none;\n  font-size: 0.55rem;\n  font-weight: bold;\n  text-transform: uppercase; }\n  a:hover {\n    text-decoration: underline; }\n\nlabel {\n  color: #4c4c4c;\n  display: block;\n  margin-bottom: 0.5rem;\n  text-align: left;\n  font-size: 0.55rem;\n  font-weight: bold;\n  text-transform: uppercase; }\n  label + span {\n    position: absolute;\n    top: 0;\n    right: 0;\n    font-size: 0.65rem;\n    font-weight: bold;\n    color: #eee; }\n\ninput {\n  outline: none;\n  cursor: pointer; }\n  input[type="range"] {\n    margin: 0;\n    width: 100%;\n    -webkit-appearance: none; }\n    input[type="range"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      height: 1rem;\n      width: 0.75rem;\n      background: #ffeb00;\n      border-radius: 0.1rem; }\n    input[type="range"]::-webkit-slider-runnable-track {\n      background: #080808;\n      height: 1rem; }\n  input[type="button"] {\n    border-radius: 0.1rem;\n    background: #222222;\n    color: #eee;\n    padding: 0.25rem 1rem;\n    border: none;\n    font-size: 0.7rem;\n    font-weight: bold;\n    text-transform: uppercase; }\n  input.toggled {\n    background: #ffeb00;\n    color: #4c4c4c; }\n  input:hover {\n    opacity: 0.7; }\n\nnav {\n  position: fixed;\n  bottom: 1rem;\n  right: 1rem;\n  left: 1rem;\n  z-index: 1;\n  text-align: center;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none; }\n  nav button {\n    padding: 0;\n    border: none;\n    display: inline-block;\n    border-radius: 50%;\n    overflow: hidden;\n    margin: 0 0.5rem;\n    border: 0.2rem solid #151515;\n    outline: none;\n    cursor: pointer; }\n    nav button img {\n      width: 5rem;\n      height: 5rem;\n      display: block; }\n    nav button:hover {\n      opacity: 0.7; }\n',""])},function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",o=n[3];if(!o)return t;if(e&&"function"==typeof btoa){var r=function(n){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"}(o),i=o.sources.map(function(n){return"/*# sourceURL="+o.sourceRoot+n+" */"});return[t].concat(i).concat([r]).join("\n")}return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];"number"==typeof i&&(o[i]=!0)}for(r=0;r<n.length;r++){var a=n[r];"number"==typeof a[0]&&o[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var o={},r=function(n){var e;return function(){return void 0===e&&(e=n.apply(this,arguments)),e}}(function(){return window&&document&&document.all&&!window.atob}),i=function(n){var e={};return function(n,t){if("function"==typeof n)return n();if(void 0===e[n]){var o=function(n,e){return e?e.querySelector(n):document.querySelector(n)}.call(this,n,t);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(n){o=null}e[n]=o}return e[n]}}(),a=null,c=0,u=[],s=t(4);function l(n,e){for(var t=0;t<n.length;t++){var r=n[t],i=o[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(h(r.parts[a],e))}else{var c=[];for(a=0;a<r.parts.length;a++)c.push(h(r.parts[a],e));o[r.id]={id:r.id,refs:1,parts:c}}}}function f(n,e){for(var t=[],o={},r=0;r<n.length;r++){var i=n[r],a=e.base?i[0]+e.base:i[0],c={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(c):t.push(o[a]={id:a,parts:[c]})}return t}function d(n,e){var t=i(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=u[u.length-1];if("top"===n.insertAt)o?o.nextSibling?t.insertBefore(e,o.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),u.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=i(n.insertAt.before,t);t.insertBefore(e,r)}}function v(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=u.indexOf(n);e>=0&&u.splice(e,1)}function m(n){var e=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var o=function(){0;return t.nc}();o&&(n.attrs.nonce=o)}return p(e,n.attrs),d(n,e),e}function p(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function h(n,e){var t,o,r,i;if(e.transform&&n.css){if(!(i="function"==typeof e.transform?e.transform(n.css):e.transform.default(n.css)))return function(){};n.css=i}if(e.singleton){var u=c++;t=a||(a=m(e)),o=b.bind(null,t,u,!1),r=b.bind(null,t,u,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",p(e,n.attrs),d(n,e),e}(e),o=function(n,e,t){var o=t.css,r=t.sourceMap,i=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||i)&&(o=s(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),c=n.href;n.href=URL.createObjectURL(a),c&&URL.revokeObjectURL(c)}.bind(null,t,e),r=function(){v(t),t.href&&URL.revokeObjectURL(t.href)}):(t=m(e),o=function(n,e){var t=e.css,o=e.media;o&&n.setAttribute("media",o);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),r=function(){v(t)});return o(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;o(n=e)}else r()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=r()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=f(n,e);return l(t,e),function(n){for(var r=[],i=0;i<t.length;i++){var a=t[i];(c=o[a.id]).refs--,r.push(c)}n&&l(f(n,e),e);for(i=0;i<r.length;i++){var c;if(0===(c=r[i]).refs){for(var u=0;u<c.parts.length;u++)c.parts[u]();delete o[c.id]}}}};var g=function(){var n=[];return function(e,t){return n[e]=t,n.filter(Boolean).join("\n")}}();function b(n,e,t,o){var r=t?"":o.css;if(n.styleSheet)n.styleSheet.cssText=g(e,r);else{var i=document.createTextNode(r),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,o=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var r,i=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(n,e,t){"use strict";t.r(e);var o={view:{x:-.5,y:0,zoom:3},ui:{},resolution:.5,iterations:50,divergence:15,webgl:!0,animate:!1,flying:!1,time:0},r=[],i=function(){if(0===r.length)for(var n=0;n<1e4;n++){var e=2*Math.PI*(n/1e4);r.push(Math.sin(e))}},a=function(n,e,t){return(e-n)*t+parseFloat(n,10)},c=function(n){i();var e=parseInt(1e4*n/(2*Math.PI),10)%1e4;return r[e]},u=function(n,e,t,o,r){e-=.5,t-=.5;var i=l(n)*r,a=f(n),c=n.zoom*o,u=c*r,s=c,d=c;return{x:n.x-e*(u-i),y:n.y-t*(s-a),zoom:d}},s=function(){return document.body.clientWidth/document.body.clientHeight},l=function(n){return n.zoom},f=function(n){return n.zoom},d=null,v=null,m=function(n){var e=n.createBuffer();return n.bindBuffer(n.ARRAY_BUFFER,e),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-1,1,1,1,-1,-1,1,-1]),n.STATIC_DRAW),e},p=function(n,e,t){var o=n.createShader(e);return n.shaderSource(o,t),n.compileShader(o),n.getShaderParameter(o,n.COMPILE_STATUS)?o:(n.deleteShader(o),null)},h=function(n,e){var t="\nprecision highp float;\n\nuniform vec4 view;\nuniform vec2 screen;\nuniform float phase;\nvarying vec2 vUV;  \n\n#define ITERATIONS ".concat(e.toFixed(2),"\n\nvec4 getColor(float t) {\n    \n    return vec4(\n        (cos(t) + 1.0) * 0.5,\n        (sin(t + 3.1415) + 1.0) * 0.5,\n        (sin(t) + 1.0) * 0.5,\n        1.0\n    );\n}\n\nvoid main() {\n\n    vec4 color = vec4(0.0,0.0,0.0,1.0); \n\n    float COMPx = 0.0;\n    float COMPy = 0.0;\n    float z = 0.0;\n\n    float zoom = view.z;\n    float width = zoom * view.w;\n    float height = zoom;\n    \n    float left = view.x - width * 0.5;\n    float top = view.y - height * 0.5;  \n\n    float factorX = width / 1.0;\n    float factorY = height / 1.0;\n\n   for(float i = 0.0; i < 1.0; i += (1.0 / ITERATIONS)) {\n\n        float x = (vUV.x * factorX) + left;\n        float y = (vUV.y * factorY) + top;\n        \n        float COMPx_new = COMPx * COMPx - COMPy * COMPy + x;\n        float COMPy_new = 2.0 * COMPx * COMPy + y;\n        float zN = (COMPx_new + COMPy_new);\n\n        if (abs(zN - z) > 5.0) {\n            color = getColor(i * 10.0 + phase);\n            break;\n        }\n\n        COMPx = COMPx_new;\n        COMPy = COMPy_new;\n        z = zN;\n    }\n\n    gl_FragColor = color;\n}\n"),o=p(n,n.VERTEX_SHADER,"\nprecision highp float;\n\nattribute vec2 vertexPosition;\n\nvarying vec2 vUV; \n\nvoid main() {\n\n    float x = vertexPosition.x;\n    float y = vertexPosition.y;\n\n    vUV = vec2(x, -y) * 0.5 + vec2(0.5, 0.5);\n    gl_Position =  vec4(vertexPosition.xy, 0.0, 1.0);\n}\n"),r=p(n,n.FRAGMENT_SHADER,t),i=n.createProgram();if(n.attachShader(i,o),n.attachShader(i,r),n.linkProgram(i),n.getProgramParameter(i,n.LINK_STATUS))return{program:i,attribLocations:{vertexPosition:n.getAttribLocation(i,"vertexPosition")},uniformLocations:{view:n.getUniformLocation(i,"view"),screen:n.getUniformLocation(i,"screen"),phase:n.getUniformLocation(i,"phase")}}},g=function(n,e,t){n.viewport(0,0,n.canvas.width,n.canvas.height),n.clearColor(1,1,0,1),n.clear(n.COLOR_BUFFER_BIT),function(n,e,t){n.bindBuffer(n.ARRAY_BUFFER,d),n.vertexAttribPointer(v.attribLocations.vertexPosition,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(v.attribLocations.vertexPosition),n.useProgram(v.program),n.uniform4fv(v.uniformLocations.view,[e.view.x,e.view.y,e.view.zoom,t]),n.uniform2fv(v.uniformLocations.screen,[n.canvas.width,n.canvas.height]),n.uniform1f(v.uniformLocations.phase,e.time)}(n,e,t),n.drawArrays(n.TRIANGLE_STRIP,0,4)},b=function(n,e,t){var o=document.getElementById(n);if(o){var r=function(n){var e=o.parentElement.querySelector("span");e&&(e.innerText=n)};o.value=e,o.addEventListener("change",function(n){r(n.currentTarget.value),t&&t(n)}),r(e)}},y=function(n,e,t){var o=document.getElementById(n);o&&(o.classList.toggle("toggled",e),o.addEventListener("click",function(n){e=!e,o.classList.toggle("toggled",e),t(n)}))},w=function(n,e){var t=document.getElementById(n);t&&t.addEventListener("click",e)},x=function(n,e,t){n[e+0]=125*(function(n){i();var e=parseInt(1e4*(n+.5*Math.PI)/(2*Math.PI),10)%1e4;return r[e]}(t)+1),n[e+1]=125*(c(t+Math.PI)+1),n[e+2]=125*(c(t)+1),n[e+3]=255},C=function(n,e,t){var o=n.canvas.width,r=n.canvas.height;n.fillStyle="black",n.fillRect(0,0,o,r);var i=n.getImageData(0,0,o,r);!function(n,e,t,o,r){for(var i=o.view,a=o.time,c=o.iterations,u=o.divergence,s=l(i)*r,d=f(i),v=i.x-.5*s,m=i.y-.5*d,p=s/e,h=d/t,g=0;g<e;g++)for(var b=0;b<t;b++)for(var y=g*p+v,w=b*h+m,C=0,M=0,O=0,P=0;P<1;P+=1/c){var L=M*M-O*O+y,R=2*M*O+w,S=L+R;if(Math.abs(S-C)>u){x(n,4*(b*e+g),10*P+a);break}M=L,O=R,C=S}}(i.data,o,r,e,t),n.putImageData(i,0,0)},M=(t(0),null),O=function(n){return n.clientX/document.body.clientWidth},P=function(n){return n.clientY/document.body.clientHeight},L=function(n,e){var t=Object.assign({},o.view);o.flying&&(clearTimeout(o.flying),o.flying=void 0);o.flying=setTimeout(function r(i){var c=Math.min((Date.now()-i)/1e3,.5),u=function(n,e){return(n/=e/2)<1?.5*n*n*n:.5*((n-=2)*n*n+2)}(c,.5);o.view=function(n,e,t){return{x:a(n.x,e.x,t),y:a(n.y,e.y,t),zoom:a(n.zoom,e.zoom,t)}}(t,n,u),o.flying=c<.5?setTimeout(r,10,i):void 0,!o.flying&&e&&e()},0,Date.now())},R=function(n){if(n.buttons>0){var e=-n.movementX/document.body.clientWidth,t=-n.movementY/document.body.clientHeight;o.view=function(n,e,t,o){var r=l(n)*o,i=f(n);return{x:n.x+e*r,y:n.y+t*i,zoom:n.zoom}}(o.view,e,t,s())}},S=function(n){var e=O(n),t=P(n),r=n.wheelDeltaY>0?.75:1.25;L(u(o.view,e,t,r,s()))},z=function(n){var e=O(n),t=P(n);L(u(o.view,e,t,.1,s()))},A=function(){var n=document.querySelector("canvas"),e=parseInt(document.body.clientWidth*o.resolution),t=parseInt(document.body.clientHeight*o.resolution);n.width!==e&&(n.width=e),n.height!==t&&(n.height=t),o.webgl?g(M,o,s()):C(M,o,s()),o.animate&&(o.time=Date.now()/1e3%1e3)},T=function(){L({x:-.5,y:0,zoom:3})},I=function(n){o.resolution=parseFloat(n.currentTarget.value)},E=function(n){o.iterations=parseInt(n.currentTarget.value),o.webgl&&F(o.webgl)},U=function(n){o.divergence=parseInt(n.currentTarget.value),o.webgl&&F(o.webgl)},k=function(){o.animate=!o.animate},j=function(){o.webgl=!o.webgl,F(o.webgl)},_=function(n,e){!function(n,e){var t=document.body.querySelector(n);if(t){var o=document.createElement("canvas");o.width=150,o.height=150;var r=o.getContext("2d");e(r),t.src=r.canvas.toDataURL(),o.remove()}}("#".concat(n," img"),function(n){C(n,Object.assign({},o,{view:e}),1)}),w(n,function(){!function(n){var e={x:-.5,y:0,zoom:3};return n.x===e.x&&n.y===e.y&&n.zoom===e.zoom}(o.view)?L({x:-.5,y:0,zoom:3},function(){return L(e)}):L(e)})},B=function(){w("reset",T),y("animate",o.animate,k),y("mode",o.webgl,j),b("resolution",o.resolution,I),b("iterations",o.iterations,E),b("divergence",o.divergence,U),F(o.webgl),_("dest0",{x:-.8036284402834375,y:.18252764009245603,zoom:.0017168874184687476}),_("dest1",{x:-1.195852878464819,y:-.31260127931769716,zoom:.02999999999999997}),_("dest2",{x:.28773359691377504,y:.011569467738227467,zoom:.0010047419752590714}),_("dest3",{x:-.5658287599483223,y:.5653723561505654,zoom:.057453340757295884});!function n(){A(),requestAnimationFrame(n)}()},F=function(n){var e=!0,t=!1,r=void 0;try{for(var i,a=document.body.querySelectorAll("canvas")[Symbol.iterator]();!(e=(i=a.next()).done);e=!0){i.value.remove()}}catch(n){t=!0,r=n}finally{try{e||null==a.return||a.return()}finally{if(t)throw r}}var c=document.createElement("canvas");if(c.addEventListener("mousemove",R),c.addEventListener("mousewheel",S),c.addEventListener("dblclick",z),c.addEventListener("contextmenu",function(n){return n.preventDefault()}),document.body.appendChild(c),n)try{M=function(n,e){var t=n.getContext("webgl");return d=m(t),v=h(t,e),t}(c,o.iterations)}catch(n){console.error(n),o.webgl=!1,M=c.getContext("2d")}else M=function(n){return n.getContext("2d")}(c)};B();e.default={onInit:B,onRenderFrame:A,onCanvasMouseMove:R,onCanvasMouseWheel:S,onCanvasDoubleClick:z,animateToView:L,onReset:T,onAnimateToggle:k,onToggleMode:j,onChangeResoultion:I,onChangeIterations:E}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,